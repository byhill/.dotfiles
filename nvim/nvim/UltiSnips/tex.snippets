priority 1000

##################################################
###       Preamble
##################################################
snippet preamble "preamble" b
\documentclass[10pt]{memoir}

\usepackage{myStyle}

\begin{document}

\end{document}

endsnippet

snippet header "new subfile header" b
\documentclass[../../main.tex]{subfiles}
\begin{document}

\chapter{$1}

\end{document}
endsnippet

##################################################
###       Matrices
##################################################
global !p

def create_matrix(snip):
	rows = snip.buffer[snip.line].split('-')[0]
	cols = snip.buffer[snip.line].split('-')[1]
	matrix_type = snip.buffer[snip.line][snip.buffer[snip.line].rfind('m') - 1]
	if matrix_type.isdigit():
		matrix_type = ''

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

	rows = int_val(rows)
	cols = int_val(cols)

	offset = 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind(' ') + 1]

	snip.buffer[snip.line] = ''

	final_str = old_spacing + "\\begin{" + matrix_type + "matrix}[" + "".join(['r' for i in range(cols)]) + "]\n"

	for i in range(rows):
		final_str += old_spacing + '    '
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

		final_str += " \\\\\\\n"

	final_str += old_spacing + "\\end{" + matrix_type + "matrix}$0"

	snip.expand_anon(final_str)

endglobal

pre_expand "create_matrix(snip)"
snippet "(\d+)-(\d+)(p|b|v|V)?m" "Generate table of *width* by *height*" rb
endsnippet

##################################################
###       Math Zones
##################################################
global !p

def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
	return x != '0' and y != '0'

endglobal

# snippet test "test" bA
# `!p vim.eval('vimtex#syntax#in_mathzone()')`
# endsnippet

##################################################
###       Math Symbols
##################################################
global !p

def symbolLookup(x):
	dict = {
		"a": "\\alpha",
		"b": "\\beta",
		"c": "\\chi",
		"d": "\\delta",
		"D": "\\Delta",
		"e": "\\epsilon",
		"ve": "\\varepsilon",
		"f": "\\phi",
		"F": "\\Phi",
		"vf": "\\varphi",
		"g": "\\gamma",
		"G": "\\Gamma",
		"h": "\\eta",
		"i": "\\iota",
		"k": "\\kappa",
		"vk": "\\varkappa",
		"l": "\lambda",
		"L": "\\Lambda",
		"m": "\\mu",
		"n": "\\nu",
		"o": "\\theta",
		"O": "\\Theta",
		"vO": "\\emptyset",
		"vo": "\\vartheta",
		"p": "\\pi",
		"P": "\\Pi",
		"r": "\\rho",
		"R": "\\Rho",
		"vr": "\\varrho",
		"s": "\\sigma",
		"S": "\\Sigma",
		"t": "\\tau",
		"U": "\\Upsilon",
		"w": "\\omega",
		"W": "\\Omega",
		"x": "\\xi",
		"X": "\\Xi",
		"y": "\\psi",
		"Y": "\\Psi",
		"z": "\\zeta",
	}
	return dict[x] if x in dict else x

endglobal

context math()
snippet ",(v?[A-Za-uw-z])" "Greek Letter" rAi
`!p snip.rv = symbolLookup(match.group(1))`
endsnippet

snippet ",(v?[A-Za-uw-z])" "Greek Letter" rAw
\(`!p snip.rv = symbolLookup(match.group(1))`$1\)$0
endsnippet

context math()
snippet ";([A-Za-z0-9])" "Math Letter" rAi
`!p snip.rv = match.group(1)`
endsnippet

snippet ";([A-Za-z0-9])" "Math letter" rAw
\(`!p snip.rv = match.group(1)`$1\)$0
endsnippet

priority 2000
context math()
snippet "`(c|n|q|r|z|e|p)" "Math blackboard font" riA
`!p snip.rv = "\\" + match.group(1).capitalize()`
endsnippet

snippet "`(c|n|q|r|z|e|p)" "Math blackboard font" rw
\(`!p snip.rv = "\\" + match.group(1).capitalize()`$1\)$0
endsnippet

priority 1000
context math()
snippet "`([a-z])" "Math blackboard font" riA
\mathbb{`!p snip.rv = match.group(1).capitalize()`}
endsnippet

snippet "`([a-z])" "Math blackboard font" rw
\(\mathbb{`!p snip.rv = match.group(1).capitalize()`}$1\)$0
endsnippet

context math()
snippet "`([A-Z])" "Mathcal font" rAi
\mathcal{`!p snip.rv = match.group(1)`}
endsnippet

snippet "`([A-Z])" "Mathcal font" rw
\(\mathcal{`!p snip.rv = match.group(1)`}$1\)$0
endsnippet

##################################################
###       Regular Snippets
##################################################
snippet chapt "\chapter*" b
\chapter{$1}
endsnippet

snippet sec "\section" b
\section{$1}
endsnippet

snippet ssec "\subsection" b
\subsection{$1}
endsnippet

snippet emph "\emph" A
\emph{$1}
endsnippet

snippet ipt "\input" bA
\input{$1}
endsnippet

##################################################
###       Symbols
##################################################
snippet ... "\ldots" Ai
\ldots
endsnippet

snippet ~~ "\sim" Ai
\sim
endsnippet

snippet "    itm" "\item" brA

\item
	$1
endsnippet
##################################################
###       Math Symbols
##################################################
context math()
snippet uu "\cup" Aw
\cup
endsnippet

context math()
snippet aa "\cap" Aw
\cap
endsnippet

context math()
snippet ooo "\infty" Aw
\infty
endsnippet

context math()
snippet <= "\leq" Ai
\leq
endsnippet

context math()
snippet >= "\geq" Ai
\geq
endsnippet

context math()
snippet != "\neq" Aw
\neq
endsnippet

context math()
snippet inn "\in" Aw
\in
endsnippet

context math()
snippet nin "\not\in" Aw
\not\in
endsnippet

context math()
snippet too "\to" Aw
\to
endsnippet

context math()
snippet mto "\mapsto" Aw
\mapsto
endsnippet

context math()
snippet qq "\quad" Aw
\quad
endsnippet

context math()
snippet ** "\cdot" Ai
\cdot
endsnippet

context math()
snippet orr "\vee" Aw
\vee
endsnippet

context math()
snippet andd "\wedge" Aw
\wedge
endsnippet

context math()
snippet nott "\neg" Aw
\neg
endsnippet

context math()
snippet := "\coloneqq" Ai
\coloneqq
endsnippet

context math()
snippet ccc "\subset" Aw
\subset
endsnippet

context math()
snippet cc= "\subseteq" Aw
\subseteq
endsnippet

context math()
snippet || "\mid" Aw
\mid
endsnippet

snippet <-- "\leftarrow" Ai
\leftarrow
endsnippet

context math()
snippet xx "\times" Aw
\times
endsnippet

context math()
snippet oo+ "\oplus" Aw
\oplus
endsnippet

context math()
snippet oox "\otimes" Aw
\otimes
endsnippet

context math()
snippet ==> "\Rightarrow" Aw
\Rightarrow
endsnippet

##################################################
###       Fractions
##################################################
context math()
snippet // "fraction" Ai
\frac{$1}{$2}$0
endsnippet

##################################################
###       Operators and other symbol manipulation
##################################################
context math()
snippet "(?<!\\)(cos|sin|log|exp)" "Math Operator" rAi
`!p snip.rv = "\\" + match.group(1)`
endsnippet

context math()
snippet "(\\(cos|sin|log|exp))" "Math Operator: Add parenthesis" ri
`!p snip.rv = match.group(1)`\br{$1} $0
endsnippet

# context math()
snippet sqrt "square root" Ai
\sqrt{$1}$0
endsnippet

priority 2000
context math()
snippet "(\\[A-Za-z]+|[A-Za-z]|\d+)(bar|hat)" "" rAw
`!p snip.rv = "\\" + match.group(2) + "{" + match.group(1) + "}"`
endsnippet

priority 1000
context math()
snippet bar "" w
\bar{$1}$0
endsnippet

##################################################
###       Subscripts and Superscripts
##################################################
context math()
snippet __ "subscript" Ai
_{$1}$0
endsnippet

context math()
snippet ^^ "superscript" Ai
^{$1}$0
endsnippet

context math()
snippet "([A-Za-z]|\})(\d)" "Auto-subscript" rAi
`!p snip.rv = match.group(1) + "_" + match.group(2)`
endsnippet

context math()
snippet inv "inverse" i
^{-1}
endsnippet

##################################################
###       MATH SNIPPETS
##################################################
context math()
snippet "(?<!(\\|[A-Za-z\d]))(lrb|set|sqbr|abs|ceil|floor|norm|angl)" "MyStyle Math brackets" rA
`!p snip.rv = "\\" + match.group(2)`{$1}$0
endsnippet

context math()
snippet "(?<!\\)int" "integral" rAw
\int_{$1}^{$2} $3 \ud $0
endsnippet

context math()
snippet "(?<!\\)sum" "summation" rAw
\sum_{$1}^{$2} $0
endsnippet

context math()
snippet "(?<!\\)prod" "product" rAw
\prod_{$1}^{$2} $0
endsnippet

context math()
snippet "UU" "bigcup" rAw
\bigcup_{$1}^{$2} $0
endsnippet

context math()
snippet "AA" "bigcap" rAw
\bigcap_{$1}^{$2} $0
endsnippet

context math()
snippet "(?<!\\)Orr" "bigvee" rAw
\bigvee_{$1}^{$2} $0
endsnippet

context math()
snippet "(?<!\\)Andd" "bigwedge" rAw
\bigwedge_{$1}^{$2} $0
endsnippet

context math()
snippet "(?<!\\)limm" "limit" rAw
\lim_{$1} $0
endsnippet

context math()
snippet "(?<!\\)lims" "limsup" rAw
\limsup_{$1} $0
endsnippet

context math()
snippet "(?<!\\)limi" "\liminf" rAw
\liminf_{$1} $0
endsnippet

##################################################
###       Environments in Math Mode
##################################################
context math()
snippet cases "cases environment" bA
\begin{cases}
	$1
\end{cases}$0
endsnippet

context math()
snippet txt "\text" Aw
\text{$1}$0
endsnippet

##################################################
###       ENVIRONMENTS
##################################################
snippet xx "math mode" A
\($1\)$0
endsnippet

snippet eqn "equation* environment" bA
\begin{equation*}
	$1
\end{equation*}$0
endsnippet

snippet algn "align* environment" bA
\begin{align*}
	$1
\end{align*}$0
endsnippet

snippet enum "enumerate environment" b
\begin{enumerate}[${1:(a)}]
\item
	$2
\end{enumerate}$0
endsnippet

snippet itemize "itemize envionrment" b
\begin{itemize}
\item
	$1
\end{itemize}$0
endsnippet

snippet %%% "comment" b
%%%       $1
endsnippet

snippet exrc "exercise enivonrment" b
%%% Exercise $1
\begin{exrc}[$2]
	${3:TODO}

\begin{soln}
	${0:TODO}

\end{soln}
\end{exrc}
endsnippet

snippet pb "problem enivonrment" b
%%% Problem $1
\begin{pb}[$2]
	${3:TODO}

\begin{soln}
	${0:TODO}

\end{soln}
\end{pb}
endsnippet
